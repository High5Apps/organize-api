services:
  app:
    build:
      context: app
      target: prod
    depends_on:
      - db
    environment:
      ORGANIZE_DATABASE_PASSWORD: ${ORGANIZE_DATABASE_PASSWORD:?err}
      ORGANIZE_DATABASE_USER: postgres
      ORGANIZE_DATABASE_HOST: db
      RAILS_ENV: production
      RAILS_LOG_TO_STDOUT: true
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY_APP:?err}
    image: localhost:5001/organize-app
    ports:
      - "127.0.0.1:3000:3000"
    restart: always
  certs:
    build:
      context: certs
    image: localhost:5001/organize-certs
    restart: always
    volumes:
      - cert-www:/var/www/certbot/:rw
      - cert-conf:/etc/letsencrypt/:rw
  db:
    environment:
      PGDATA: /var/lib/postgresql/15/data
      POSTGRES_PASSWORD: ${ORGANIZE_DATABASE_PASSWORD:?err}
    image: postgres:15.2
    ports:
      - "127.0.0.1:5432:5432"
    restart: always
    volumes:
      - db-data:/var/lib/postgresql:rw
  db-upgrade:
    build:
      context: db-upgrade
    image: localhost:5001/db-upgrade
    profiles:
      - runManually
    restart: never
    volumes:
      - db-data:/var/lib/postgresql:rw
  site:
    build:
      context: site
      target: prod
    environment:
      RAILS_LOG_TO_STDOUT: true
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY_SITE:?err}
    image: localhost:5001/organize-site
    ports:
      - "127.0.0.1:3001:3000"
    restart: always
  web:
    build:
      context: web
    depends_on:
      - app
      - certs
    image: localhost:5001/organize-web
    ports:
      - "80:80"
      - "443:443"
    restart: always
    volumes:
      - cert-www:/var/www/certbot/:ro
      - cert-conf:/etc/nginx/ssl/:ro

volumes:
  cert-conf:
  cert-www:
  db-data:
